/*
 * -------------------------------------------------
 *  nfcore/chipseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 *
 * -------------------------------------------------
 *  Nextflow config file for UPPMAX (milou / irma)
 * -------------------------------------------------
 * Imported under the 'uppmax' Nextflow
 * profile in nextflow.config
 */

process {
  executor = 'slurm'
  clusterOptions = '--partition ccr'
  
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: makeBWAindex {
    module = ['bwa']
  }
  withName: fastqc {
    module = ['fastqc']
  }
  withName: trim_galore {
    module = ['fastqc', 'trimgalore']
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: bwa {
    module = ['bwa', 'samtools']
  }
  withName: samtools {
    module = ['bedtools', 'samtools']
  }
  withName: bwa_mapped {
    module = ['samtools']
  }
  withName: picard {
	  // Actually the -Xmx value should be kept lower,
    // and is set through the markdup_java_options
    module = ['picard', 'samtools', 'bedtools']
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: phantompeakqualtools {
    module = ['R']
  }
  withName: calculateNSCRSC {
    module = ['R']
  }
  withName: deepTools {
    module = ['deeptools']
  }
  withName: ngsplot {
    module = ['R']
  }
  withName: macs {
    module = ['macs']
  }
  withName: saturation {
    module = ['samtools', 'macs']
  }
  withName: saturation_r {
    module = ['R']
  }
  withName: chippeakanno {
    module = ['R']
  }
  withName: homer_find_motifs {
    module = ['homer']
  }
  withName: "multiqc" {
    module = ['multiqc']
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    cache = false
  }
  withName: output_documentation {
    module = ['R']
  }
  
  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 48.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 96.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
}

params {
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = '/fdb/igenomes/'
}

params.saveReference = true
params.saveTrimmed = true
params.saveAlignedIntermediates = true

