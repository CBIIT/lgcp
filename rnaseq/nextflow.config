/*
 * -------------------------------------------------
 *  nfcore/rnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 *
 * -------------------------------------------------
 *  Nextflow config file for UPPMAX (milou / irma)
 * -------------------------------------------------
 * Imported under the 'uppmax' Nextflow
 * profile in nextflow.config
 */

process {
  executor = 'slurm'
  clusterOptions = '--partition ccr'
  $makeSTARindex.module = ['STAR']
  $fastqc.module = ['fastqc']
  $trim_galore.module = ['fastqc', 'trimgalore']
  $star.module = ['STAR']
  $rseqc.module = ['rseqc', 'samtools/1.3']
  $preseq.module = ['preseq']
  $markDuplicates.module = ['picard/2.0.1']
  $dupradar.module = ['R/3.2.3']
  $featureCounts.module = ['subread']
  $stringtieFPKM.module = ['stringtie']
  $sample_correlation.module = ['R/3.2.3']
  $multiqc.module = ['multiqc']
  $output_documentation.module = ['R/3.2.3']
}

process {

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withName: trim_galore {
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:markDuplicates {
	  // Actually the -Xmx value should be kept lower,
    // and is set through the markdup_java_options
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: makeHISATindex {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withLabel: low_memory {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withLabel: mid_memory {
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: "multiqc|get_software_versions" {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    cache = false
  }
}

params {
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = '/fdb/igenomes/'
}

params.saveReference = true
params.saveTrimmed = true
params.saveAlignedIntermediates = true

